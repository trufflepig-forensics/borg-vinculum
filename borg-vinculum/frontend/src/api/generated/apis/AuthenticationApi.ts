/* tslint:disable */
/* eslint-disable */
/**
 * borg-vinculum
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiErrorResponse,
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    LoginRequest,
    LoginRequestFromJSON,
    LoginRequestToJSON,
} from '../models';

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Login to the vinculum  On successful login you will retrieve a cookie.
     * @summary Login to the vinculum
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Login to the vinculum  On successful login you will retrieve a cookie.
     * Login to the vinculum
     */
    login(requestParameters: LoginOperationRequest): Promise<void>;

    /**
     * Log out of this session  Logs a logged-in user out of his session.
     * @summary Log out of this session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     * Log out of this session  Logs a logged-in user out of his session.
     * Log out of this session
     */
    logout(): Promise<void>;

    /**
     * Test the current login state
     * @summary Test the current login state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    testRaw(): Promise<runtime.ApiResponse<void>>;

    /**
     * Test the current login state
     * Test the current login state
     */
    test(): Promise<void>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Login to the vinculum  On successful login you will retrieve a cookie.
     * Login to the vinculum
     */
    async loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling login.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login to the vinculum  On successful login you will retrieve a cookie.
     * Login to the vinculum
     */
    async login(requestParameters: LoginOperationRequest): Promise<void> {
        await this.loginRaw(requestParameters);
    }

    /**
     * Log out of this session  Logs a logged-in user out of his session.
     * Log out of this session
     */
    async logoutRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/auth/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log out of this session  Logs a logged-in user out of his session.
     * Log out of this session
     */
    async logout(): Promise<void> {
        await this.logoutRaw();
    }

    /**
     * Test the current login state
     * Test the current login state
     */
    async testRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test the current login state
     * Test the current login state
     */
    async test(): Promise<void> {
        await this.testRaw();
    }

}
