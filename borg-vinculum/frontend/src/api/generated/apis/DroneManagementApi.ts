/* tslint:disable */
/* eslint-disable */
/**
 * borg-vinculum
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  CreateDroneRequest,
  CreateDroneResponse,
  GetAllDronesResponse,
  GetDroneResponse,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    CreateDroneRequestFromJSON,
    CreateDroneRequestToJSON,
    CreateDroneResponseFromJSON,
    CreateDroneResponseToJSON,
    GetAllDronesResponseFromJSON,
    GetAllDronesResponseToJSON,
    GetDroneResponseFromJSON,
    GetDroneResponseToJSON,
} from '../models';

export interface CreateDroneOperationRequest {
    createDroneRequest: CreateDroneRequest;
}

export interface DeleteDroneRequest {
    uuid: string;
}

export interface GetDroneRequest {
    uuid: string;
}

/**
 * 
 */
export class DroneManagementApi extends runtime.BaseAPI {

    /**
     * Create a new drone  The `name` parameter must be unique for all drones.  A uuid for identification and a bearer token for use in borg drone is returned.
     * Create a new drone
     */
    async createDroneRaw(requestParameters: CreateDroneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDroneResponse>> {
        if (requestParameters.createDroneRequest === null || requestParameters.createDroneRequest === undefined) {
            throw new runtime.RequiredError('createDroneRequest','Required parameter requestParameters.createDroneRequest was null or undefined when calling createDrone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/drones`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDroneRequestToJSON(requestParameters.createDroneRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDroneResponseFromJSON(jsonValue));
    }

    /**
     * Create a new drone  The `name` parameter must be unique for all drones.  A uuid for identification and a bearer token for use in borg drone is returned.
     * Create a new drone
     */
    async createDrone(requestParameters: CreateDroneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDroneResponse> {
        const response = await this.createDroneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a drone by its uuid
     * Delete a drone by its uuid
     */
    async deleteDroneRaw(requestParameters: DeleteDroneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteDrone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/drones/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a drone by its uuid
     * Delete a drone by its uuid
     */
    async deleteDrone(requestParameters: DeleteDroneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDroneRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve all drones from the vinculum
     * Retrieve all drones from the vinculum
     */
    async getAllDronesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllDronesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/drones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllDronesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all drones from the vinculum
     * Retrieve all drones from the vinculum
     */
    async getAllDrones(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllDronesResponse> {
        const response = await this.getAllDronesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a drone by its uuid  The parameter `token` is used as bearer token to authenticate the drone to the vinculum.
     * Retrieve a drone by its uuid
     */
    async getDroneRaw(requestParameters: GetDroneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDroneResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getDrone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/drones/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDroneResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a drone by its uuid  The parameter `token` is used as bearer token to authenticate the drone to the vinculum.
     * Retrieve a drone by its uuid
     */
    async getDrone(requestParameters: GetDroneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDroneResponse> {
        const response = await this.getDroneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
